{"version":3,"file":"static/js/108.1087d086.chunk.js","mappings":"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","sources":["components/SectionTitle/SectionTitle.styled.jsx","components/SectionTitle/SectionTitle.jsx","components/Form/Form.styled.jsx","redux/contacts/selectors.js","components/Form/Form.jsx","components/Contacts/Contacts.style.jsx","components/Contacts/Contacts.jsx","components/ContactsSection/ContactsSection.styled.jsx","components/ContactsSection/ContactsSection.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  font-weight: 500;\n  font-size: 30px;\n  margin-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Title } from './SectionTitle.styled';\n\nconst SectionTitle = ({ title }) => {\n  return <Title>{title}</Title>;\n};\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default SectionTitle;\n","import styled from '@emotion/styled';\nimport { Button, TextField } from '@mui/material';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  gap: 20px;\n\n  width: 300px;\n  padding: 20px;\n\n  border: 2px solid black;\n  border-radius: 10px;\n`;\n\nconst Title = styled.h2`\n  align-self: flex-start;\n  font-weight: 400;\n  font-size: 24px;\n`;\n\nconst Input = styled(TextField)`\n  width: 100%;\n  padding: 5px 0;\n`;\n\nconst BtnAdd = styled(Button)`\n  min-width: 100px;\n  padding: 5px 10px;\n`;\n\nexport { Form, Title, Input, BtnAdd };\n","export const getContacts = state => state.contacts;\nexport const getFilter = state => state.filter;\n","import { BtnAdd, Form, Input, Title } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nconst PhoneBookForm = () => {\n  const { items } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const addNewName = e => {\n    e.preventDefault();\n    const { name, number } = e.target.elements;\n\n    const checkedName = items.find(elem => {\n      return elem.name === name.value;\n    });\n\n    if (checkedName) {\n      alert(`${name.value} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name: name.value, number: number.value }));\n\n    name.value = '';\n    number.value = '';\n  };\n\n  return (\n    <Form action=\"\" onSubmit={addNewName}>\n      <Title>Name</Title>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <Title>Number</Title>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <BtnAdd variant=\"contained\" size=\"small\" color=\"success\" type=\"submit\">\n        Add contact\n      </BtnAdd>\n    </Form>\n  );\n};\n\nexport default PhoneBookForm;\n","import styled from '@emotion/styled';\nimport { Button } from '@mui/material';\n\nconst ContainerContacts = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  padding-bottom: 0;\n`;\n\nconst Title = styled.h2`\n  font-weight: 400;\n  font-size: 24px;\n  margin-bottom: 20px;\n`;\n\nconst Label = styled.label`\n  display: block;\n  font-weight: 400;\n  font-size: 18px;\n  margin-bottom: 10px;\n  font-style: italic;\n`;\n\nconst Input = styled.input`\n  width: 200px;\n  padding: 5px 10px;\n  margin-bottom: 20px;\n\n  border: 1px solid black;\n  border-radius: 4px;\n  transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n\n  :hover,\n  :focus {\n    border-color: #2c9cdd;\n    outline: none;\n  }\n\n  :focus {\n    box-shadow: gray 0px 4px 8px;\n  }\n`;\n\nconst ListContacts = styled.ul`\n  list-style: inside;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ContactItem = styled.li`\n  display: flex;\n  gap: 40px;\n  justify-content: space-between;\n  align-items: center;\n\n  width: 400px;\n  height: 40px;\n  margin-left: 20px;\n\n  :first-of-type {\n    margin-top: 10px;\n  }\n`;\n\nconst DeleteBtn = styled(Button)`\n  width: 80px;\n  height: 25px;\n\n  transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n`;\n\nexport {\n  ContainerContacts,\n  Title,\n  Label,\n  Input,\n  ListContacts,\n  ContactItem,\n  DeleteBtn,\n};\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { deleteContact, getAllContacts } from 'redux/contacts/operations';\n\nimport {\n  ContactItem,\n  ContainerContacts,\n  DeleteBtn,\n  Input,\n  Label,\n  ListContacts,\n  Title,\n} from './Contacts.style';\n\nconst Contacts = ({ title }) => {\n  const { items, isLoading, error } = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  const onFilter = e => {\n    const filterValue = e.target.value;\n    dispatch(filterContacts(filterValue));\n  };\n\n  const onItemDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const filteredSearch = () => {\n    const normaliseFilter = filter.toLowerCase();\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(normaliseFilter)\n    );\n  };\n\n  return (\n    <ContainerContacts>\n      <Title>{title}</Title>\n\n      <Label>Find contacts by name</Label>\n      <Input type=\"text\" name=\"filter\" value={filter} onChange={onFilter} />\n\n      <ListContacts>\n        {isLoading && <h2>Loading...</h2>}\n        {error && <h2>{error}</h2>}\n        {items.length > 0 &&\n          filteredSearch().map(({ id, name, number }) => (\n            <ContactItem key={id}>\n              <p>\n                {name}: {number}\n              </p>\n              <DeleteBtn\n                variant=\"contained\"\n                size=\"small\"\n                color=\"error\"\n                type=\"button\"\n                onClick={() => {\n                  onItemDelete(id);\n                }}\n              >\n                Delete\n              </DeleteBtn>\n            </ContactItem>\n          ))}\n      </ListContacts>\n    </ContainerContacts>\n  );\n};\n\nContacts.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Contacts;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin-top: 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 40px 40px 0;\n`;\n","import SectionTitle from 'components/SectionTitle';\nimport PhoneBookForm from 'components/Form/Form';\nimport Contacts from 'components/Contacts';\nimport { Container } from './ContactsSection.styled';\n\nexport const ContactsSection = () => {\n  return (\n    <Container>\n      <SectionTitle title=\"Phonebook\" />\n      <PhoneBookForm />\n      <Contacts title={'Contacts'} />\n    </Container>\n  );\n};\n","import { ContactsSection } from 'components/ContactsSection/ContactsSection';\n\nconst ContactsPage = () => {\n  return <ContactsSection />;\n};\n\nexport default ContactsPage;\n"],"names":["Title","styled","title","Form","Input","TextField","BtnAdd","Button","getContacts","state","contacts","getFilter","filter","items","useSelector","dispatch","useDispatch","action","onSubmit","e","preventDefault","target","elements","name","number","find","elem","value","alert","addContact","type","pattern","required","variant","size","color","ContainerContacts","Label","ListContacts","ContactItem","DeleteBtn","isLoading","error","useEffect","getAllContacts","onChange","filterValue","filterContacts","length","normaliseFilter","toLowerCase","includes","filteredSearch","map","id","onClick","deleteContact","onItemDelete","Container","ContactsSection"],"sourceRoot":""}